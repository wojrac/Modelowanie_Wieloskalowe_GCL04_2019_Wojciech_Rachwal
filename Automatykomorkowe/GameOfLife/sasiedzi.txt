	neighboursWithLeftDown[0] = myBoard.get()[1];
				neighboursWithLeftDown[1] = myBoard.get()[sizeX];
				neighboursWithLeftDown[2] = myBoard.get()[sizeX + 1];
				neighboursWithLeftDown[3] = myBoard.get()[rightDownId];
				neighboursWithLeftDown[4] = myBoard.get()[rightDownId + sizeX];

				neighboursWithRightDown[0] = myBoard.get()[rightDownId - 1];
				neighboursWithRightDown[1] = myBoard.get()[rightDownId + sizeX];
				neighboursWithRightDown[2] = myBoard.get()[rightDownId + sizeX - 1];
				neighboursWithRightDown[3] = myBoard.get()[0];
				neighboursWithRightDown[4] = myBoard.get()[sizeX];

				neighboursWithRightTop[0] = myBoard.get()[rightTopId - 1];
				neighboursWithRightTop[1] = myBoard.get()[rightTopId - sizeX];
				neighboursWithRightTop[2] = myBoard.get()[rightTopId - 1 - sizeX];
				neighboursWithRightTop[3] = myBoard.get()[leftTopId];
				neighboursWithRightTop[4] = myBoard.get()[leftTopId - sizeX];

				neighboursWithLeftTop[0] = myBoard.get()[leftTopId + 1];
				neighboursWithLeftTop[1] = myBoard.get()[leftTopId - sizeX];
				neighboursWithLeftTop[2] = myBoard.get()[leftTopId + 1 - sizeX];
				neighboursWithLeftTop[3] = myBoard.get()[rightTopId];
				neighboursWithLeftTop[4] = myBoard.get()[rightTopId - sizeX];
				//CZAS NA PASY
				//najpierw musze wyznaczyc ilosc komorek w kolumnie
				for (int i = 0; i < NumberOfCellInRow; i++)
				{
					neighboursWithTopRow[i][0] = myBoard.get()[(leftTopId + i + 1) - 1];
					neighboursWithTopRow[i][1] = myBoard.get()[(leftTopId + i + 1) + 1];
					neighboursWithTopRow[i][2] = myBoard.get()[(leftTopId + i + 1) - sizeX - 1];
					neighboursWithTopRow[i][3] = myBoard.get()[(leftTopId + i + 1) - sizeX];
					neighboursWithTopRow[i][4] = myBoard.get()[(leftTopId + i + 1) - sizeX + 1];

					neighboursWithDownRow[i][0] = myBoard.get()[(i + 1) - 1];
					neighboursWithDownRow[i][1] = myBoard.get()[(i + 1) + 1];
					neighboursWithDownRow[i][2] = myBoard.get()[(i + 1) + sizeX + 1];
					neighboursWithDownRow[i][3] = myBoard.get()[(i + 1) + sizeX];
					neighboursWithDownRow[i][4] = myBoard.get()[(i + 1) + sizeX - 1];
				}  //chyba dziala :)

				for (int i = 0; i < NumberOfCellInColumn; i++)
				{
					neighboursWithLeftColumn[i][0] = myBoard.get()[(sizeX*i + sizeX) + sizeX];
					neighboursWithLeftColumn[i][1] = myBoard.get()[(sizeX*i + sizeX) + sizeX + 1];
					neighboursWithLeftColumn[i][2] = myBoard.get()[(sizeX*i + sizeX) + 1];
					neighboursWithLeftColumn[i][3] = myBoard.get()[(sizeX*i + sizeX) - sizeX + 1];
					neighboursWithLeftColumn[i][4] = myBoard.get()[(sizeX*i + sizeX) - sizeX];
					//nowe
					neighboursWithLeftColumn[i][5] = myBoard.get()[rightDownId + sizeX*i + sizeX];
					neighboursWithLeftColumn[i][6] = myBoard.get()[(rightDownId + sizeX*(i + 1)) + sizeX];
					neighboursWithLeftColumn[i][7] = myBoard.get()[(rightDownId + sizeX*(i + 1)) - sizeX];

					neighboursWithRightColumn[i][0] = myBoard.get()[(rightDownId + sizeX*(i + 1)) + sizeX];
					neighboursWithRightColumn[i][1] = myBoard.get()[(rightDownId + sizeX*(i + 1)) + sizeX - 1];
					neighboursWithRightColumn[i][2] = myBoard.get()[(rightDownId + sizeX*(i + 1)) - 1];
					neighboursWithRightColumn[i][3] = myBoard.get()[(rightDownId + sizeX*(i + 1)) - sizeX - 1];
					neighboursWithRightColumn[i][4] = myBoard.get()[(rightDownId + sizeX*(i + 1)) - sizeX];
					//nowe
					neighboursWithRightColumn[i][5] = myBoard.get()[i*sizeX + sizeX];
					neighboursWithRightColumn[i][6] = myBoard.get()[(sizeX*i + sizeX) + sizeX];
					neighboursWithRightColumn[i][7] = myBoard.get()[(sizeX*i + sizeX) - sizeX];
				}//wyglada ze dziala
				for (int i = 0, l = 0; l < sizeY - 2; i += sizeX, l++)
				{
					for (int j = sizeX + 1 + i, k = 0; k < sizeX - 2; j++, k++)
					{
						temporaryArray[k + l*(sizeX - 2)] = j;
					}
				}
				for (int i = 0; i < NumberOfCellInTheMiddle; i++)
				{

					neighboursMiddle[i][0] = myBoard.get()[temporaryArray[i] - sizeX - 1];
					neighboursMiddle[i][1] = myBoard.get()[temporaryArray[i] - sizeX];
					neighboursMiddle[i][2] = myBoard.get()[temporaryArray[i] - sizeX + 1];
					neighboursMiddle[i][3] = myBoard.get()[temporaryArray[i] + 1];
					neighboursMiddle[i][4] = myBoard.get()[temporaryArray[i] + sizeX + 1];
					neighboursMiddle[i][5] = myBoard.get()[temporaryArray[i] + sizeX];
					neighboursMiddle[i][6] = myBoard.get()[temporaryArray[i] + sizeX - 1];
					neighboursMiddle[i][7] = myBoard.get()[temporaryArray[i] - 1];
				}
				arrayWithSum[0] = neighboursWithLeftDown[0].IsAlive() + neighboursWithLeftDown[1].IsAlive() + neighboursWithLeftDown[2].IsAlive() + neighboursWithLeftDown[3].IsAlive() + neighboursWithLeftDown[4].IsAlive();
				arrayWithSum[rightDownId] = neighboursWithRightDown[0].IsAlive() + neighboursWithRightDown[1].IsAlive() + neighboursWithRightDown[2].IsAlive() + neighboursWithRightDown[3].IsAlive() + neighboursWithRightDown[4].IsAlive();
				arrayWithSum[rightTopId] = neighboursWithRightTop[0].IsAlive() + neighboursWithRightTop[1].IsAlive() + neighboursWithRightTop[2].IsAlive() + neighboursWithRightTop[3].IsAlive() + neighboursWithRightTop[4].IsAlive();
				arrayWithSum[leftTopId] = neighboursWithLeftTop[0].IsAlive() + neighboursWithLeftTop[1].IsAlive() + neighboursWithLeftTop[2].IsAlive() + neighboursWithLeftTop[3].IsAlive() + neighboursWithLeftTop[4].IsAlive();  //oki to chyba dziala
				for (int i = 1, j = 0; j < NumberOfCellInRow; i++, j++)
				{
					arrayWithSum[i] = neighboursWithDownRow[j][0].IsAlive() + neighboursWithDownRow[j][1].IsAlive() + neighboursWithDownRow[j][2].IsAlive() + neighboursWithDownRow[j][3].IsAlive() + neighboursWithDownRow[j][4].IsAlive();
				}
				for (int i = leftTopId + 1, j = 0; j < NumberOfCellInRow; i++, j++)
				{
					arrayWithSum[i] = neighboursWithTopRow[j][0].IsAlive() + neighboursWithTopRow[j][1].IsAlive() + neighboursWithTopRow[j][2].IsAlive() + neighboursWithTopRow[j][3].IsAlive() + neighboursWithTopRow[j][4].IsAlive();
				}
				for (int i = sizeX, j = 0; j < NumberOfCellInColumn; i += sizeX, j++)
				{
					arrayWithSum[i] = neighboursWithLeftColumn[j][0].IsAlive() + neighboursWithLeftColumn[j][1].IsAlive() + neighboursWithLeftColumn[j][2].IsAlive() + neighboursWithLeftColumn[j][3].IsAlive() + neighboursWithLeftColumn[j][4].IsAlive() + neighboursWithLeftColumn[j][5].IsAlive() + neighboursWithLeftColumn[j][6].IsAlive() + neighboursWithLeftColumn[j][7].IsAlive();
				}
				for (int i = rightDownId + sizeX, j = 0; j < NumberOfCellInColumn; i += sizeX, j++)
				{
					arrayWithSum[i] = neighboursWithRightColumn[j][0].IsAlive() + neighboursWithRightColumn[j][1].IsAlive() + neighboursWithRightColumn[j][2].IsAlive() + neighboursWithRightColumn[j][3].IsAlive() + neighboursWithRightColumn[j][4].IsAlive() + neighboursWithRightColumn[j][5].IsAlive() + neighboursWithRightColumn[j][6].IsAlive() + neighboursWithRightColumn[j][7].IsAlive();
				}
				for (int j = 0; j < (sizeX - 2)*(sizeY - 2); j++)
				{
					arrayWithSum[temporaryArray[j]] = neighboursMiddle[j][0].IsAlive() + neighboursMiddle[j][1].IsAlive() + neighboursMiddle[j][2].IsAlive() + neighboursMiddle[j][3].IsAlive() + neighboursMiddle[j][4].IsAlive() + neighboursMiddle[j][5].IsAlive() + neighboursMiddle[j][6].IsAlive() + neighboursMiddle[j][7].IsAlive();
				}
				/*for (int j = 0; j < sizeX*sizeY; j++)
				{
				memento1D.push_back(myBoard.get()[j].IsAlive());
				}
				memento2D.push_back(memento1D);
				memento1D.clear();*/
				//TERAZ WARUNKI
				for (int i = 0; i < sizeX*sizeY; i++)
				{
					if (!(myBoard.get()[i].IsAlive()))
					{
						if (arrayWithSum[i] == 3)
						{
							myBoard.get()[i].setCellAlive();
						}
					}
					else
					{
						if (arrayWithSum[i] < 2 || arrayWithSum[i] > 3)
						{
							myBoard.get()[i].setCellDead();
						}
					}
				}

				for (int i = sizeY - 1; i >= 0; i--)
				{
					for (int j = 0; j < sizeX; j++)
					{
						if (myBoard.get()[j + sizeX*i].IsAlive())
						{
							window.draw(circleShape1);
							circleShape1.setPosition(20 * j, 20 * i);
						}
						else
						{
							window.draw(circleShape2);
							circleShape2.setPosition(20 * j, 20 * i);
						}
					}
				}